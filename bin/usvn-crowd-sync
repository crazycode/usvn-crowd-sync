#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
require 'rubygems'
require 'data_mapper'


$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'crowd'

require 'usvn-crowd-sync'
require 'open-uri'

CROWD_CONFIG_PATH='/etc/usvn-crowd-sync.yml'

config = YAML.load(File.new(CROWD_CONFIG_PATH))

DataMapper.setup(:default, config["usvn_db"])

crowd = Crowd.new(config)
# 得到所有crowd的组名
crowd_group_names = crowd.find_all_group_names

crowd_group_names.each do |g|
  puts g
end

ug_hashcode1 = 0  # 用于确认用户组关系是否有修改
GroupUser.all.each { |ug| ug_hashcode1 += ug.hash }

cached_user_hash = Hash.new
User.all.each { |u| cached_user_hash[u.login] = u }

groups = Group.create_or_update(crowd_group_names)

crowd_group_names.each do |gname|
  begin
    user_names = crowd.find_users_in_group(gname)
    g = Group.first(:name => gname.strip)

    unless g.nil?
      userGroups = GroupUser.all(:groups_id => g.id).to_ary
      user_names.each do |name|
        begin
          u = cached_user_hash[name] || User.first(:login => name)
          if u.nil?
            crowd_user = crowd.find_by_name(name)
            u = User.create(:login => crowd_user.name,
                            :firstname => crowd_user.name,
                            :lastname => crowd_user.full_name,
                            :email => crowd_user.email,
                            :password => 'a9asdf907aafeqwerqw',
                            :secret_id => 'a9asdf907aafeqwerqw',
                            :is_admin => 0)
            cached_user_hash[u.login] = u
          end
          ug = GroupUser.first(:users_id => u.id, :groups_id => g.id)
          if ug.nil?
            GroupUser.create(:users_id => u.id, :groups_id => g.id, :is_leader => 0)
          end
          # 从已有关系中删除
          userGroups.delete_if {|ugx| ugx.users_id == u.id}
        rescue Exception => e1
          puts "User Not found #{name}: #{e1}"
        end
      end
      # 删除多余的关系
      userGroups.each { |ugx|
        GroupUser.all(:groups_id => ugx.groups_id, :users_id => ugx.users_id).destroy
      }
    end
  rescue Exception => e
    puts "Not found #{gname}: #{e}"
  end
end

ug_hashcode2 = 0
GroupUser.all.each { |ug| ug_hashcode2 += ug.hash }

if ug_hashcode2 == ug_hashcode1
  puts "Nothing Changed! before=#{ug_hashcode1}, after=#{ug_hashcode2}"
else
  usvn_home = config['usvn_home']
  #regenerate authz file
  if File.exists?("#{usvn_home}/tools/regenerate_authz_file.php")
    system("cd #{usvn_home} && php #{usvn_home}/tools/regenerate_authz_file.php #{usvn_home}/config.ini")
  else
    puts "File #{usvn_home}/tools/regenerate_authz_file.php DOES NOT Exists!"
  end
end
